Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/Disruptor_Cannon"
	IconNameKey = "Parts/Disruptor_Cannon_Icon"
	ID = "stafa.disruptor_cannon"
	EditorGroups = ["Klingon"]
	DescriptionKey = "Parts/Disruptor_Cannon_Desc"
	Resources
	[
		[steel, 88]
		[coil, 30]
		[coil2, 6]
	]
	TypeCategories = [weapon, uses_power, is_crewed]
	ReceivableBuffs : ^/0/ReceivableBuffs [AntimatterPower, CaptainsRoomBuff]
	Size = [2, 4]
	PhysicalRect = [0, 2, 2, 2]
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 12000
	InitialPenetrationResistance = 3
	PenetrationRectType = Normal
	ProhibitAbove = 1
	IsRotateable = true
	AllowedDoorLocations
	[
		[-1, 3]
		[0, 4]
		[1, 4]
		[2, 3]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [32, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 2
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 0
			OperationalToggle = PowerToggle
		}

		CrewLocation1
		{
			Type = CrewLocation
			Location = [.65625, 2.27]
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [1.34375, 2.27]
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 2
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				&../../CrewLocation1/Location
				&../../CrewLocation2/Location
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
			]
		}

		Graphics
		{
			Type = Graphics
			Location = [1, 2]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [2, 2]
					}
					{
						File = "floor_33.png"
						Size = [2, 2]
					}
					{
						File = "floor_66.png"
						Size = [2, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, 0]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.1
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [2, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				Offset = [0, 0]
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 2]
					}
					{
						File = "walls_33.png"
						Size = [2, 2]
					}
					{
						File = "walls_66.png"
						Size = [2, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				Location = [1, 1]
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 2]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [2, 2]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [2, 2]
					}
				]
			}
			WallsStencil
			{
				Layer = "walls_stencil"
				Offset = [0, -1]
				DamageLevels
				[
					{
						File = "stencil.png"
						Size = [1, 1]
					}
				]
			}
		}

		Turret
		{
			Type = TurretWeapon
			Location = [1, 1]
			Rotation = -90d// Relative to unrotated part.
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			//FireInterval = 2/30
			FireInterval = 0.5
			FiringArc = 30d
			RotateSpeed = 360d
			FireThresholdAngle = 1d
			AIFirepowerRating = 300
			FirePermissionToggle = FireModeToggle
			AutoTargetCrewSafetyDist = 8
			IgnoreSourceShipLowLOSChecks = true
			IgnoreJunkLOSChecks = true
			HoldTargetWhileFiring = 0.5
			Emitter = BulletEmitter

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = Turret
			Invert = true
		}

		BulletEmitter
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger = Turret
			GetTargetFrom = Turret
			Location = [.5, 0]
			OperationalToggle = IsOperational
			Spread = [-1d, 1d]
			FireDelay = .333
			Burst = 3
			BurstDelay = 0.01
			Bullet = &<../../../shots/disruptor_bolt/disruptor_bolt.rules>
			ResourceStorage = BatteryStorage
			ResourcesUsed = 2000
			MinResourcesUsed = 1
		}

		FireEffect
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitter
			Trigger = BulletEmitter
			Location = [1.1, 0]
			AnchorMediaEffects = true

			MediaEffects
			[
				&<particles/disruptor_cannon_shoot.rules>
				&<particles/disruptor_cannon_shoot_flash.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "shoot.wav"
					Volume = .6
					SpeedVariation = .25
				}
			]
		}

		TurretGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Rotation = 90d
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "structure"
				DamageLevels
				[
					{
						File = "turret_on.png"
						NormalsFile = "turret_normals.png"
						Size = [1, 2]
						Offset = [0, -0.5]
					}
					{
						File = "turret_on.png"
						NormalsFile = "turret_normals.png"
						Size = [1, 2]
						Offset = [0, -0.5]
					}
					{
						File = "turret_on.png"
						NormalsFile = "turret_normals.png"
						Size = [1, 2]
						Offset = [0, -0.5]
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "structure"
				DamageLevels
				[
					{
						File = "turret_off.png"
						NormalsFile = "turret_normals.png"
						Size = [1, 2]
						Offset = [0, -0.5]
					}
					{
						File = "turret_off.png"
						NormalsFile = "turret_normals.png"
						Size = [1, 2]
						Offset = [0, -0.5]
					}
					{
						File = "turret_off.png"
						NormalsFile = "turret_normals.png"
						Size = [1, 2]
						Offset = [0, -0.5]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [1, 2]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [2, 2]
				}
				{
					File = "batteries2.png"
					Size = [2, 2]
				}
				{
					File = "batteries3.png"
					Size = [2, 2]
				}
				{
					File = "batteries4.png"
					Size = [2, 2]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1.5, 2]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyed
			Location = [1.5, 2]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 2]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [.5, .5]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					Delay = &~/Part/Components/Turret/FireInterval
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [.5, .5]
					}
				}
				
				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [.5, .5]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 3]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = &../StatsByCategory/0/Stats/PowerPerSecond
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}


	StatsByCategory
	[
		{
			NameKey = "StatCategories/PhaserBolt"
			Stats
			{
				DamagePerShot = &~/Part/Components/BulletEmitter/Bullet/Components/DamagePool/Damage/BaseValue
				DamagePerSecond = (&DamagePerShot) * (&ROF)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
				ROF = 1 / (&~/Part/Components/Turret/FireInterval)
				RangeLimited = [&~/Part/Components/BulletEmitter/Bullet/Range/BaseValue, &~/Part/Components/BulletEmitter/Bullet/Range/MaxValue]
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
				ShotSpeed = &~/Part/Components/BulletEmitter/Bullet/Speed/BaseValue
				ShotHP = &~/Part/Components/BulletEmitter/Bullet/Components/Targetable/Health
				PowerPerShot = (&~/Part/Components/BulletEmitter/ResourcesUsed) / 1000
				PowerPerSecond = (&PowerPerShot) * (&ROF)
				ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
			}
		}
	]
}